// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

package ColorSepServer;

public final class Image {
  private Image() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ImagePackageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 time = 1;
    /**
     * <code>required int32 time = 1;</code>
     *
     * <pre>
     * 拍摄时间
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required int32 time = 1;</code>
     *
     * <pre>
     * 拍摄时间
     * </pre>
     */
    int getTime();

    // required int64 frame_count = 2;
    /**
     * <code>required int64 frame_count = 2;</code>
     *
     * <pre>
     * 图片序号
     * </pre>
     */
    boolean hasFrameCount();
    /**
     * <code>required int64 frame_count = 2;</code>
     *
     * <pre>
     * 图片序号
     * </pre>
     */
    long getFrameCount();

    // required int32 image_class = 3;
    /**
     * <code>required int32 image_class = 3;</code>
     *
     * <pre>
     * 图片类别
     * </pre>
     */
    boolean hasImageClass();
    /**
     * <code>required int32 image_class = 3;</code>
     *
     * <pre>
     * 图片类别
     * </pre>
     */
    int getImageClass();

    // required int32 class_count = 4;
    /**
     * <code>required int32 class_count = 4;</code>
     *
     * <pre>
     * 类别序号
     * </pre>
     */
    boolean hasClassCount();
    /**
     * <code>required int32 class_count = 4;</code>
     *
     * <pre>
     * 类别序号
     * </pre>
     */
    int getClassCount();

    // required int32 image_width = 5;
    /**
     * <code>required int32 image_width = 5;</code>
     *
     * <pre>
     * 图片宽度
     * </pre>
     */
    boolean hasImageWidth();
    /**
     * <code>required int32 image_width = 5;</code>
     *
     * <pre>
     * 图片宽度
     * </pre>
     */
    int getImageWidth();

    // required int32 image_height = 6;
    /**
     * <code>required int32 image_height = 6;</code>
     *
     * <pre>
     * 图片高度
     * </pre>
     */
    boolean hasImageHeight();
    /**
     * <code>required int32 image_height = 6;</code>
     *
     * <pre>
     * 图片高度
     * </pre>
     */
    int getImageHeight();

    // required int32 process_time = 7;
    /**
     * <code>required int32 process_time = 7;</code>
     *
     * <pre>
     * 服务端开始本次处理的时间(从1900年开始的秒)
     * </pre>
     */
    boolean hasProcessTime();
    /**
     * <code>required int32 process_time = 7;</code>
     *
     * <pre>
     * 服务端开始本次处理的时间(从1900年开始的秒)
     * </pre>
     */
    int getProcessTime();

    // required int32 process_status = 8;
    /**
     * <code>required int32 process_status = 8;</code>
     *
     * <pre>
     * 服务端当前的分选状态(0表示未分选，1表示分选)
     * </pre>
     */
    boolean hasProcessStatus();
    /**
     * <code>required int32 process_status = 8;</code>
     *
     * <pre>
     * 服务端当前的分选状态(0表示未分选，1表示分选)
     * </pre>
     */
    int getProcessStatus();

    // required int32 retinue_init = 9;
    /**
     * <code>required int32 retinue_init = 9;</code>
     *
     * <pre>
     * 随行检测初始化(0表示失败，1表示成功)
     * </pre>
     */
    boolean hasRetinueInit();
    /**
     * <code>required int32 retinue_init = 9;</code>
     *
     * <pre>
     * 随行检测初始化(0表示失败，1表示成功)
     * </pre>
     */
    int getRetinueInit();

    // required int32 add_sample_result = 10;
    /**
     * <code>required int32 add_sample_result = 10;</code>
     *
     * <pre>
     * 加入分类样本的集合结果
     * </pre>
     */
    boolean hasAddSampleResult();
    /**
     * <code>required int32 add_sample_result = 10;</code>
     *
     * <pre>
     * 加入分类样本的集合结果
     * </pre>
     */
    int getAddSampleResult();

    // required int32 data_type = 11;
    /**
     * <code>required int32 data_type = 11;</code>
     *
     * <pre>
     * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
     * </pre>
     */
    boolean hasDataType();
    /**
     * <code>required int32 data_type = 11;</code>
     *
     * <pre>
     * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
     * </pre>
     */
    int getDataType();

    // required string add_sample_counts = 12;
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    boolean hasAddSampleCounts();
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    java.lang.String getAddSampleCounts();
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    com.google.protobuf.ByteString
        getAddSampleCountsBytes();

    // required bytes image_data = 13;
    /**
     * <code>required bytes image_data = 13;</code>
     *
     * <pre>
     * 图像数据
     * </pre>
     */
    boolean hasImageData();
    /**
     * <code>required bytes image_data = 13;</code>
     *
     * <pre>
     * 图像数据
     * </pre>
     */
    com.google.protobuf.ByteString getImageData();
  }
  /**
   * Protobuf type {@code ColorSepServer.ImagePackage}
   */
  public static final class ImagePackage extends
      com.google.protobuf.GeneratedMessage
      implements ImagePackageOrBuilder {
    // Use ImagePackage.newBuilder() to construct.
    private ImagePackage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ImagePackage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ImagePackage defaultInstance;
    public static ImagePackage getDefaultInstance() {
      return defaultInstance;
    }

    public ImagePackage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ImagePackage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              time_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              frameCount_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              imageClass_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              classCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              imageWidth_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              imageHeight_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              processTime_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              processStatus_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              retinueInit_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              addSampleResult_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              dataType_ = input.readInt32();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000800;
              addSampleCounts_ = input.readBytes();
              break;
            }
            case 106: {
              bitField0_ |= 0x00001000;
              imageData_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ColorSepServer.Image.internal_static_ColorSepServer_ImagePackage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ColorSepServer.Image.internal_static_ColorSepServer_ImagePackage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ColorSepServer.Image.ImagePackage.class, ColorSepServer.Image.ImagePackage.Builder.class);
    }

    public static com.google.protobuf.Parser<ImagePackage> PARSER =
        new com.google.protobuf.AbstractParser<ImagePackage>() {
      public ImagePackage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImagePackage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ImagePackage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 time = 1;
    public static final int TIME_FIELD_NUMBER = 1;
    private int time_;
    /**
     * <code>required int32 time = 1;</code>
     *
     * <pre>
     * 拍摄时间
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 time = 1;</code>
     *
     * <pre>
     * 拍摄时间
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    // required int64 frame_count = 2;
    public static final int FRAME_COUNT_FIELD_NUMBER = 2;
    private long frameCount_;
    /**
     * <code>required int64 frame_count = 2;</code>
     *
     * <pre>
     * 图片序号
     * </pre>
     */
    public boolean hasFrameCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 frame_count = 2;</code>
     *
     * <pre>
     * 图片序号
     * </pre>
     */
    public long getFrameCount() {
      return frameCount_;
    }

    // required int32 image_class = 3;
    public static final int IMAGE_CLASS_FIELD_NUMBER = 3;
    private int imageClass_;
    /**
     * <code>required int32 image_class = 3;</code>
     *
     * <pre>
     * 图片类别
     * </pre>
     */
    public boolean hasImageClass() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 image_class = 3;</code>
     *
     * <pre>
     * 图片类别
     * </pre>
     */
    public int getImageClass() {
      return imageClass_;
    }

    // required int32 class_count = 4;
    public static final int CLASS_COUNT_FIELD_NUMBER = 4;
    private int classCount_;
    /**
     * <code>required int32 class_count = 4;</code>
     *
     * <pre>
     * 类别序号
     * </pre>
     */
    public boolean hasClassCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 class_count = 4;</code>
     *
     * <pre>
     * 类别序号
     * </pre>
     */
    public int getClassCount() {
      return classCount_;
    }

    // required int32 image_width = 5;
    public static final int IMAGE_WIDTH_FIELD_NUMBER = 5;
    private int imageWidth_;
    /**
     * <code>required int32 image_width = 5;</code>
     *
     * <pre>
     * 图片宽度
     * </pre>
     */
    public boolean hasImageWidth() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 image_width = 5;</code>
     *
     * <pre>
     * 图片宽度
     * </pre>
     */
    public int getImageWidth() {
      return imageWidth_;
    }

    // required int32 image_height = 6;
    public static final int IMAGE_HEIGHT_FIELD_NUMBER = 6;
    private int imageHeight_;
    /**
     * <code>required int32 image_height = 6;</code>
     *
     * <pre>
     * 图片高度
     * </pre>
     */
    public boolean hasImageHeight() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 image_height = 6;</code>
     *
     * <pre>
     * 图片高度
     * </pre>
     */
    public int getImageHeight() {
      return imageHeight_;
    }

    // required int32 process_time = 7;
    public static final int PROCESS_TIME_FIELD_NUMBER = 7;
    private int processTime_;
    /**
     * <code>required int32 process_time = 7;</code>
     *
     * <pre>
     * 服务端开始本次处理的时间(从1900年开始的秒)
     * </pre>
     */
    public boolean hasProcessTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 process_time = 7;</code>
     *
     * <pre>
     * 服务端开始本次处理的时间(从1900年开始的秒)
     * </pre>
     */
    public int getProcessTime() {
      return processTime_;
    }

    // required int32 process_status = 8;
    public static final int PROCESS_STATUS_FIELD_NUMBER = 8;
    private int processStatus_;
    /**
     * <code>required int32 process_status = 8;</code>
     *
     * <pre>
     * 服务端当前的分选状态(0表示未分选，1表示分选)
     * </pre>
     */
    public boolean hasProcessStatus() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 process_status = 8;</code>
     *
     * <pre>
     * 服务端当前的分选状态(0表示未分选，1表示分选)
     * </pre>
     */
    public int getProcessStatus() {
      return processStatus_;
    }

    // required int32 retinue_init = 9;
    public static final int RETINUE_INIT_FIELD_NUMBER = 9;
    private int retinueInit_;
    /**
     * <code>required int32 retinue_init = 9;</code>
     *
     * <pre>
     * 随行检测初始化(0表示失败，1表示成功)
     * </pre>
     */
    public boolean hasRetinueInit() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 retinue_init = 9;</code>
     *
     * <pre>
     * 随行检测初始化(0表示失败，1表示成功)
     * </pre>
     */
    public int getRetinueInit() {
      return retinueInit_;
    }

    // required int32 add_sample_result = 10;
    public static final int ADD_SAMPLE_RESULT_FIELD_NUMBER = 10;
    private int addSampleResult_;
    /**
     * <code>required int32 add_sample_result = 10;</code>
     *
     * <pre>
     * 加入分类样本的集合结果
     * </pre>
     */
    public boolean hasAddSampleResult() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 add_sample_result = 10;</code>
     *
     * <pre>
     * 加入分类样本的集合结果
     * </pre>
     */
    public int getAddSampleResult() {
      return addSampleResult_;
    }

    // required int32 data_type = 11;
    public static final int DATA_TYPE_FIELD_NUMBER = 11;
    private int dataType_;
    /**
     * <code>required int32 data_type = 11;</code>
     *
     * <pre>
     * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
     * </pre>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 data_type = 11;</code>
     *
     * <pre>
     * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
     * </pre>
     */
    public int getDataType() {
      return dataType_;
    }

    // required string add_sample_counts = 12;
    public static final int ADD_SAMPLE_COUNTS_FIELD_NUMBER = 12;
    private java.lang.Object addSampleCounts_;
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    public boolean hasAddSampleCounts() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    public java.lang.String getAddSampleCounts() {
      java.lang.Object ref = addSampleCounts_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          addSampleCounts_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string add_sample_counts = 12;</code>
     *
     * <pre>
     * 加入分类样本的个数，格式化字符串 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAddSampleCountsBytes() {
      java.lang.Object ref = addSampleCounts_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        addSampleCounts_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bytes image_data = 13;
    public static final int IMAGE_DATA_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString imageData_;
    /**
     * <code>required bytes image_data = 13;</code>
     *
     * <pre>
     * 图像数据
     * </pre>
     */
    public boolean hasImageData() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required bytes image_data = 13;</code>
     *
     * <pre>
     * 图像数据
     * </pre>
     */
    public com.google.protobuf.ByteString getImageData() {
      return imageData_;
    }

    private void initFields() {
      time_ = 0;
      frameCount_ = 0L;
      imageClass_ = 0;
      classCount_ = 0;
      imageWidth_ = 0;
      imageHeight_ = 0;
      processTime_ = 0;
      processStatus_ = 0;
      retinueInit_ = 0;
      addSampleResult_ = 0;
      dataType_ = 0;
      addSampleCounts_ = "";
      imageData_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFrameCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasImageClass()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClassCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasImageWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasImageHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasProcessTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasProcessStatus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRetinueInit()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAddSampleResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDataType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAddSampleCounts()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasImageData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, frameCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, imageClass_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, classCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, imageWidth_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, imageHeight_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, processTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, processStatus_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, retinueInit_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, addSampleResult_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, dataType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getAddSampleCountsBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, imageData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, frameCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, imageClass_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, classCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, imageWidth_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, imageHeight_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, processTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, processStatus_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, retinueInit_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, addSampleResult_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, dataType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getAddSampleCountsBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, imageData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ColorSepServer.Image.ImagePackage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ColorSepServer.Image.ImagePackage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ColorSepServer.Image.ImagePackage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ColorSepServer.Image.ImagePackage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ColorSepServer.Image.ImagePackage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ColorSepServer.ImagePackage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ColorSepServer.Image.ImagePackageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ColorSepServer.Image.internal_static_ColorSepServer_ImagePackage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ColorSepServer.Image.internal_static_ColorSepServer_ImagePackage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ColorSepServer.Image.ImagePackage.class, ColorSepServer.Image.ImagePackage.Builder.class);
      }

      // Construct using ColorSepServer.Image.ImagePackage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        frameCount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        imageClass_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        classCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        imageWidth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        imageHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        processTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        processStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        retinueInit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        addSampleResult_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        dataType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        addSampleCounts_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        imageData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ColorSepServer.Image.internal_static_ColorSepServer_ImagePackage_descriptor;
      }

      public ColorSepServer.Image.ImagePackage getDefaultInstanceForType() {
        return ColorSepServer.Image.ImagePackage.getDefaultInstance();
      }

      public ColorSepServer.Image.ImagePackage build() {
        ColorSepServer.Image.ImagePackage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ColorSepServer.Image.ImagePackage buildPartial() {
        ColorSepServer.Image.ImagePackage result = new ColorSepServer.Image.ImagePackage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.frameCount_ = frameCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.imageClass_ = imageClass_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.classCount_ = classCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.imageWidth_ = imageWidth_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.imageHeight_ = imageHeight_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.processTime_ = processTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.processStatus_ = processStatus_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.retinueInit_ = retinueInit_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.addSampleResult_ = addSampleResult_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.dataType_ = dataType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.addSampleCounts_ = addSampleCounts_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.imageData_ = imageData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ColorSepServer.Image.ImagePackage) {
          return mergeFrom((ColorSepServer.Image.ImagePackage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ColorSepServer.Image.ImagePackage other) {
        if (other == ColorSepServer.Image.ImagePackage.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasFrameCount()) {
          setFrameCount(other.getFrameCount());
        }
        if (other.hasImageClass()) {
          setImageClass(other.getImageClass());
        }
        if (other.hasClassCount()) {
          setClassCount(other.getClassCount());
        }
        if (other.hasImageWidth()) {
          setImageWidth(other.getImageWidth());
        }
        if (other.hasImageHeight()) {
          setImageHeight(other.getImageHeight());
        }
        if (other.hasProcessTime()) {
          setProcessTime(other.getProcessTime());
        }
        if (other.hasProcessStatus()) {
          setProcessStatus(other.getProcessStatus());
        }
        if (other.hasRetinueInit()) {
          setRetinueInit(other.getRetinueInit());
        }
        if (other.hasAddSampleResult()) {
          setAddSampleResult(other.getAddSampleResult());
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        if (other.hasAddSampleCounts()) {
          bitField0_ |= 0x00000800;
          addSampleCounts_ = other.addSampleCounts_;
          onChanged();
        }
        if (other.hasImageData()) {
          setImageData(other.getImageData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTime()) {
          
          return false;
        }
        if (!hasFrameCount()) {
          
          return false;
        }
        if (!hasImageClass()) {
          
          return false;
        }
        if (!hasClassCount()) {
          
          return false;
        }
        if (!hasImageWidth()) {
          
          return false;
        }
        if (!hasImageHeight()) {
          
          return false;
        }
        if (!hasProcessTime()) {
          
          return false;
        }
        if (!hasProcessStatus()) {
          
          return false;
        }
        if (!hasRetinueInit()) {
          
          return false;
        }
        if (!hasAddSampleResult()) {
          
          return false;
        }
        if (!hasDataType()) {
          
          return false;
        }
        if (!hasAddSampleCounts()) {
          
          return false;
        }
        if (!hasImageData()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ColorSepServer.Image.ImagePackage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ColorSepServer.Image.ImagePackage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 time = 1;
      private int time_ ;
      /**
       * <code>required int32 time = 1;</code>
       *
       * <pre>
       * 拍摄时间
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 time = 1;</code>
       *
       * <pre>
       * 拍摄时间
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required int32 time = 1;</code>
       *
       * <pre>
       * 拍摄时间
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000001;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 time = 1;</code>
       *
       * <pre>
       * 拍摄时间
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        onChanged();
        return this;
      }

      // required int64 frame_count = 2;
      private long frameCount_ ;
      /**
       * <code>required int64 frame_count = 2;</code>
       *
       * <pre>
       * 图片序号
       * </pre>
       */
      public boolean hasFrameCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 frame_count = 2;</code>
       *
       * <pre>
       * 图片序号
       * </pre>
       */
      public long getFrameCount() {
        return frameCount_;
      }
      /**
       * <code>required int64 frame_count = 2;</code>
       *
       * <pre>
       * 图片序号
       * </pre>
       */
      public Builder setFrameCount(long value) {
        bitField0_ |= 0x00000002;
        frameCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 frame_count = 2;</code>
       *
       * <pre>
       * 图片序号
       * </pre>
       */
      public Builder clearFrameCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        frameCount_ = 0L;
        onChanged();
        return this;
      }

      // required int32 image_class = 3;
      private int imageClass_ ;
      /**
       * <code>required int32 image_class = 3;</code>
       *
       * <pre>
       * 图片类别
       * </pre>
       */
      public boolean hasImageClass() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 image_class = 3;</code>
       *
       * <pre>
       * 图片类别
       * </pre>
       */
      public int getImageClass() {
        return imageClass_;
      }
      /**
       * <code>required int32 image_class = 3;</code>
       *
       * <pre>
       * 图片类别
       * </pre>
       */
      public Builder setImageClass(int value) {
        bitField0_ |= 0x00000004;
        imageClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 image_class = 3;</code>
       *
       * <pre>
       * 图片类别
       * </pre>
       */
      public Builder clearImageClass() {
        bitField0_ = (bitField0_ & ~0x00000004);
        imageClass_ = 0;
        onChanged();
        return this;
      }

      // required int32 class_count = 4;
      private int classCount_ ;
      /**
       * <code>required int32 class_count = 4;</code>
       *
       * <pre>
       * 类别序号
       * </pre>
       */
      public boolean hasClassCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 class_count = 4;</code>
       *
       * <pre>
       * 类别序号
       * </pre>
       */
      public int getClassCount() {
        return classCount_;
      }
      /**
       * <code>required int32 class_count = 4;</code>
       *
       * <pre>
       * 类别序号
       * </pre>
       */
      public Builder setClassCount(int value) {
        bitField0_ |= 0x00000008;
        classCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 class_count = 4;</code>
       *
       * <pre>
       * 类别序号
       * </pre>
       */
      public Builder clearClassCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        classCount_ = 0;
        onChanged();
        return this;
      }

      // required int32 image_width = 5;
      private int imageWidth_ ;
      /**
       * <code>required int32 image_width = 5;</code>
       *
       * <pre>
       * 图片宽度
       * </pre>
       */
      public boolean hasImageWidth() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 image_width = 5;</code>
       *
       * <pre>
       * 图片宽度
       * </pre>
       */
      public int getImageWidth() {
        return imageWidth_;
      }
      /**
       * <code>required int32 image_width = 5;</code>
       *
       * <pre>
       * 图片宽度
       * </pre>
       */
      public Builder setImageWidth(int value) {
        bitField0_ |= 0x00000010;
        imageWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 image_width = 5;</code>
       *
       * <pre>
       * 图片宽度
       * </pre>
       */
      public Builder clearImageWidth() {
        bitField0_ = (bitField0_ & ~0x00000010);
        imageWidth_ = 0;
        onChanged();
        return this;
      }

      // required int32 image_height = 6;
      private int imageHeight_ ;
      /**
       * <code>required int32 image_height = 6;</code>
       *
       * <pre>
       * 图片高度
       * </pre>
       */
      public boolean hasImageHeight() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 image_height = 6;</code>
       *
       * <pre>
       * 图片高度
       * </pre>
       */
      public int getImageHeight() {
        return imageHeight_;
      }
      /**
       * <code>required int32 image_height = 6;</code>
       *
       * <pre>
       * 图片高度
       * </pre>
       */
      public Builder setImageHeight(int value) {
        bitField0_ |= 0x00000020;
        imageHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 image_height = 6;</code>
       *
       * <pre>
       * 图片高度
       * </pre>
       */
      public Builder clearImageHeight() {
        bitField0_ = (bitField0_ & ~0x00000020);
        imageHeight_ = 0;
        onChanged();
        return this;
      }

      // required int32 process_time = 7;
      private int processTime_ ;
      /**
       * <code>required int32 process_time = 7;</code>
       *
       * <pre>
       * 服务端开始本次处理的时间(从1900年开始的秒)
       * </pre>
       */
      public boolean hasProcessTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 process_time = 7;</code>
       *
       * <pre>
       * 服务端开始本次处理的时间(从1900年开始的秒)
       * </pre>
       */
      public int getProcessTime() {
        return processTime_;
      }
      /**
       * <code>required int32 process_time = 7;</code>
       *
       * <pre>
       * 服务端开始本次处理的时间(从1900年开始的秒)
       * </pre>
       */
      public Builder setProcessTime(int value) {
        bitField0_ |= 0x00000040;
        processTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 process_time = 7;</code>
       *
       * <pre>
       * 服务端开始本次处理的时间(从1900年开始的秒)
       * </pre>
       */
      public Builder clearProcessTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        processTime_ = 0;
        onChanged();
        return this;
      }

      // required int32 process_status = 8;
      private int processStatus_ ;
      /**
       * <code>required int32 process_status = 8;</code>
       *
       * <pre>
       * 服务端当前的分选状态(0表示未分选，1表示分选)
       * </pre>
       */
      public boolean hasProcessStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 process_status = 8;</code>
       *
       * <pre>
       * 服务端当前的分选状态(0表示未分选，1表示分选)
       * </pre>
       */
      public int getProcessStatus() {
        return processStatus_;
      }
      /**
       * <code>required int32 process_status = 8;</code>
       *
       * <pre>
       * 服务端当前的分选状态(0表示未分选，1表示分选)
       * </pre>
       */
      public Builder setProcessStatus(int value) {
        bitField0_ |= 0x00000080;
        processStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 process_status = 8;</code>
       *
       * <pre>
       * 服务端当前的分选状态(0表示未分选，1表示分选)
       * </pre>
       */
      public Builder clearProcessStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        processStatus_ = 0;
        onChanged();
        return this;
      }

      // required int32 retinue_init = 9;
      private int retinueInit_ ;
      /**
       * <code>required int32 retinue_init = 9;</code>
       *
       * <pre>
       * 随行检测初始化(0表示失败，1表示成功)
       * </pre>
       */
      public boolean hasRetinueInit() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 retinue_init = 9;</code>
       *
       * <pre>
       * 随行检测初始化(0表示失败，1表示成功)
       * </pre>
       */
      public int getRetinueInit() {
        return retinueInit_;
      }
      /**
       * <code>required int32 retinue_init = 9;</code>
       *
       * <pre>
       * 随行检测初始化(0表示失败，1表示成功)
       * </pre>
       */
      public Builder setRetinueInit(int value) {
        bitField0_ |= 0x00000100;
        retinueInit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 retinue_init = 9;</code>
       *
       * <pre>
       * 随行检测初始化(0表示失败，1表示成功)
       * </pre>
       */
      public Builder clearRetinueInit() {
        bitField0_ = (bitField0_ & ~0x00000100);
        retinueInit_ = 0;
        onChanged();
        return this;
      }

      // required int32 add_sample_result = 10;
      private int addSampleResult_ ;
      /**
       * <code>required int32 add_sample_result = 10;</code>
       *
       * <pre>
       * 加入分类样本的集合结果
       * </pre>
       */
      public boolean hasAddSampleResult() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 add_sample_result = 10;</code>
       *
       * <pre>
       * 加入分类样本的集合结果
       * </pre>
       */
      public int getAddSampleResult() {
        return addSampleResult_;
      }
      /**
       * <code>required int32 add_sample_result = 10;</code>
       *
       * <pre>
       * 加入分类样本的集合结果
       * </pre>
       */
      public Builder setAddSampleResult(int value) {
        bitField0_ |= 0x00000200;
        addSampleResult_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 add_sample_result = 10;</code>
       *
       * <pre>
       * 加入分类样本的集合结果
       * </pre>
       */
      public Builder clearAddSampleResult() {
        bitField0_ = (bitField0_ & ~0x00000200);
        addSampleResult_ = 0;
        onChanged();
        return this;
      }

      // required int32 data_type = 11;
      private int dataType_ ;
      /**
       * <code>required int32 data_type = 11;</code>
       *
       * <pre>
       * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
       * </pre>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 data_type = 11;</code>
       *
       * <pre>
       * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
       * </pre>
       */
      public int getDataType() {
        return dataType_;
      }
      /**
       * <code>required int32 data_type = 11;</code>
       *
       * <pre>
       * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
       * </pre>
       */
      public Builder setDataType(int value) {
        bitField0_ |= 0x00000400;
        dataType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 data_type = 11;</code>
       *
       * <pre>
       * 0 -&gt; 心跳数据；1 -&gt; 图像数据 
       * </pre>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        dataType_ = 0;
        onChanged();
        return this;
      }

      // required string add_sample_counts = 12;
      private java.lang.Object addSampleCounts_ = "";
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public boolean hasAddSampleCounts() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public java.lang.String getAddSampleCounts() {
        java.lang.Object ref = addSampleCounts_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          addSampleCounts_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAddSampleCountsBytes() {
        java.lang.Object ref = addSampleCounts_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          addSampleCounts_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public Builder setAddSampleCounts(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        addSampleCounts_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public Builder clearAddSampleCounts() {
        bitField0_ = (bitField0_ & ~0x00000800);
        addSampleCounts_ = getDefaultInstance().getAddSampleCounts();
        onChanged();
        return this;
      }
      /**
       * <code>required string add_sample_counts = 12;</code>
       *
       * <pre>
       * 加入分类样本的个数，格式化字符串 
       * </pre>
       */
      public Builder setAddSampleCountsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        addSampleCounts_ = value;
        onChanged();
        return this;
      }

      // required bytes image_data = 13;
      private com.google.protobuf.ByteString imageData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes image_data = 13;</code>
       *
       * <pre>
       * 图像数据
       * </pre>
       */
      public boolean hasImageData() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required bytes image_data = 13;</code>
       *
       * <pre>
       * 图像数据
       * </pre>
       */
      public com.google.protobuf.ByteString getImageData() {
        return imageData_;
      }
      /**
       * <code>required bytes image_data = 13;</code>
       *
       * <pre>
       * 图像数据
       * </pre>
       */
      public Builder setImageData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        imageData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes image_data = 13;</code>
       *
       * <pre>
       * 图像数据
       * </pre>
       */
      public Builder clearImageData() {
        bitField0_ = (bitField0_ & ~0x00001000);
        imageData_ = getDefaultInstance().getImageData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ColorSepServer.ImagePackage)
    }

    static {
      defaultInstance = new ImagePackage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ColorSepServer.ImagePackage)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ColorSepServer_ImagePackage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ColorSepServer_ImagePackage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013image.proto\022\016ColorSepServer\"\247\002\n\014ImageP" +
      "ackage\022\014\n\004time\030\001 \002(\005\022\023\n\013frame_count\030\002 \002(" +
      "\003\022\023\n\013image_class\030\003 \002(\005\022\023\n\013class_count\030\004 " +
      "\002(\005\022\023\n\013image_width\030\005 \002(\005\022\024\n\014image_height" +
      "\030\006 \002(\005\022\024\n\014process_time\030\007 \002(\005\022\026\n\016process_" +
      "status\030\010 \002(\005\022\024\n\014retinue_init\030\t \002(\005\022\031\n\021ad" +
      "d_sample_result\030\n \002(\005\022\021\n\tdata_type\030\013 \002(\005" +
      "\022\031\n\021add_sample_counts\030\014 \002(\t\022\022\n\nimage_dat" +
      "a\030\r \002(\014"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ColorSepServer_ImagePackage_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ColorSepServer_ImagePackage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ColorSepServer_ImagePackage_descriptor,
              new java.lang.String[] { "Time", "FrameCount", "ImageClass", "ClassCount", "ImageWidth", "ImageHeight", "ProcessTime", "ProcessStatus", "RetinueInit", "AddSampleResult", "DataType", "AddSampleCounts", "ImageData", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
