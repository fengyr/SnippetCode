"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed four million.

Hint
1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610... 
x, y, x + y, x + 2y, 2x + 3y, 3x + 5y...
"""
x, y, sum_even = 1, 1, 0
while sum_even < 4000000:
    sum_even = sum_even + x + y
    x, y = x + 2*y, 2*x + 3*y
print sum_even

all = []
x, y = 1, 1
all.append(x)
all.append(y)
while True:
    x, y = x + y, x + 2*y
    if y > 1000:
        break
    all.append(x)
    all.append(y)

print all

#method 2 -----------------------------------------------
#def Fib(num):
    #if num == 1:
        #return 1
    #if num == 2:
        #return 2

    #return Fib(num-1) + Fib(num-2)


#fib_sum = 0
#fib_list = []
#count = 1

#while True:
    #fib = Fib(count)
    #if fib <= 4000000 and (fib % 2) == 0:
        #fib_list.append(fib)
    #elif fib > 4000000:
        #break
       
    #count = count + 1

#for i in fib_list:
    #if i % 2 == 0:
        #fib_sum = fib_sum + i
#print fib_sum
